1. Python: Hoes does Python run a script?
1. Python: Where is bytecode stored and under what file format?
1. Python: What is the PVM?
1. Python: What are frozen binaries?
1. Python: How do you store the output of a python script?
1. Python: Three steps to turn a python file into executable.
1. Python: What is polymorphism?
1. Python: Print (3.14159, -42) as '3.14 | -0042'.
1. Python: Use raw strings to define a windows path.
1. Python: Encode a string into utf8 and utf16.
1. Python: Split a string using regex(split after 2 characters).
1. Python: Write a list comprehension to het the diagonal of a matrix.
1. Python: Write a list comprehension to sum the elements of each row of a matrix
1. Python: Write a number in octa/hexa/complex and binary.
1. Python: Write 3 numbers in hexa/octa and binary using f"{:}{:}{:}"
1. Python: Write a number as e^.
1. Python: Which is the difference between floor and trunc?
1. Python: What is garbadge collection?
1. Python: How do you check how many references an object has?
1. Python: Print 1234 as 'integers: ...1234...1234  ...001234'.
1. Python: Print 296999.2567 as '296,999.26'.
1. Python: Merge 2 dictionaries.
1. Python: Create a dictionary with default values.
1. Python: Create a comprehensive dictionary using zip.
1. Python: Create a named tuple.
1. Python: Store a file object inside a pickle. Load the data. Read it's contents.
1. Python: Store a file object inside a json file. Load the data. Read it's contents.
1. Python: Make an assertion.
1. Python: What does += means in lists.
1. Python: Createa a temporary print stream into a file.
1. Python: Use reduce.
1. Python: Make a triple comprehension.
1. Python: Using comprehension, go through a matrix and change each element.
1. Python: Search for files in directories.
1. Python: Create a function that traces the activation of another function.
1. Python: What is a namespace?
1. Python: How to call a module 2nd time?
1. Python: Use abstract classes (shapes and squares).
1. Python: Use OOP: create the bakery example (employee:chef, server, robot; customer, oven, pizzashop, order)
1. Python: Use Pseudo_private variables.
1. Python: Use Bound or Unbound variables.
1. Python: Create an object factory.
1. Python: Using argv
1. Python: Joining elements of a list with a special character
1. Python: Getting an item from a dictionary without the program yelling at us if it doesnt exist
1. Python: Create and and delete one folder
1. Python: Display all .txt files from one folder
1. Python: Use super from classes
1. Python: Create a nice table
1. Python: Create a function with args and kwargs
1. Python: Use map
1. Python: Use filter
1. Python: Use lambda
1. Python: Use the next magic functions within a class: __str__, __len__, __del__
1. Python: Use __name__ __ main__ functions
1. Python: Run a UNITTEST
1. Python: Create a decorator
1. Python: Use pdb module to debug
1. Python: Write prime numbers algorithm ( one liner ! )
1. Python: Unpack 7 values but use only the 3 values from the middle
1. Python: Create __add__ and __mul__ functions to make operations on objects
1. Python: Add two dictionaries
1. Python: Sort 2 objects
1. Python: Open big files in chunks
1. Python/SQLite3: Create a database, a table and the columns
1. Python/SQLite3: Use SELECT, INSERT, DELETE and UPDATE
1. Python/Collections: Create a dictionary with letters count
1. Python/Collections: Create a default dictionary
1. Python/Collections: Create an ordered dictionary
1. Python/Collections: Create a named tuple
1. Python/Datetime: Create a date, get today's date
1. Python/Datetime: Print the date like: My bday is on April 19, 1994
1. Python/OS: Change directory, remove one directory, use walk to print all the files
1. Python/Random: Print a random value between 15 and 19
1. Python/Random: Roulette: black has 18, red has 18, green has 2, print 5 trials
1. Python/Regex: Search for begining and end of a word character
1. Python/Regex: Search for digits, characters
2. Pandas: Create a series from a list
2. Pandas: Create a series from a list and change the indexing to a, b, c, d
2. Pandas: Create a dataframe from a list
2. Pandas: Create a dataframe from a dictionary
2. Pandas: Create a dataframe from a series
2. Pandas: Create a dataframe from a 1.3 Numpy array
2. Pandas: Join two dataframes
2. Pandas: Merge two dataframes
2. Pandas: Concatenate two dataframes
2. Pandas: Read a .csv file, print it's tail, head and shape
2. Pandas: Read a .csv file, print the mean/min/max/median/std
2. Pandas: Read a .csv file, print it's columns
2. Pandas: Read a .csv file, view one single column 2 ways
2. Pandas: Read a .csv file, view 3 columns
2. Pandas: Read a .csv file, view particular rows
2. Pandas: Read a .csv file, view one particular cell
2. Pandas: Read a .csv file, rename one column
2. Pandas: Read a .csv file, fill the NA cells with one value
2. Pandas: Read a .csv file, delete one column
2. Pandas: Read a .csv file, make correlations between 3 columns
2. Pandas: Read a .csv file, convert the type of one column
2. Pandas: Read a .csv file, iterate through rows
2. Pandas: Read a .csv file, filter by one column name
2. Pandas: Read a .csv file, use loc and iloc
2. Pandas: Read a .csv file, create a column
2. Pandas: Read a .csv file, create a column with lambda function
2. Pandas: Read a .csv file, sort 2 columns
2. Pandas: Read a .csv file, use multiple filtering
2. Pandas: Read a .csv file, use multiple filtering using REGEX
2. Pandas: Read a .csv file, save the new csv
2. Pandas: Read a .csv file, reset the index ( 2 ways, inplace)
2. Pandas: Read a .csv file, change the value of on column ( napoli -> steaua)
2. Pandas: Read a .csv file, group the elements by one column, sorted by another column, mean values
2. Pandas: Read a .csv file, create a new column which counts the types
2. Pandas: Read a .csv file in chunks (iterative)
3. Numpy: Create an array, print it's dimentsion, itemsize, type, size, shape
3. Numpy: Create an array, reshape it, slice it ( print only the middle)
3. Numpy: Create an array, using an interval and  [0, 10] and print 6 values between 
3. Numpy: Create an array and print it's max and sum ( total sum, sum for two axis)
3. Numpy: Create an array and print it's square root, standard deviation
3. Numpy: Create 2 arrays and stack them h and v ( 3 methods)
3. Numpy: Create an 2x3 array and make it all by one row
3. Numpy: Create an array and print it's exponential and logaritmic values
3. Numpy: Create an array and filter it's odd values
3. Numpy: Create an array and use Tile
3. Numpy: Print the common and the different elements between 2 arrays
3. Numpy: Create an array and use where
3. Numpy: Create a function which takes x and y and makes it x*3+y*2 and apply it on 2 arrays
3. Numpy: Create an array and swap it's collumns and rows
3. Numpy: Create an array and reverse it's collumns and rows
4. SQL: How do you start the mysql shell?
4. SQL: How do you change the password?
4. SQL: Drop a database if it exists, after create one, and use it.
4. SQL: Create a table with the next properties: autoincrement, not null, default, unique, int(2 types), string(2 types), date, decimal, and set a primary key 2 variants
4. SQL: Delete a table
4. SQL: Add and delete a column
4. SQL: insert into a table
4. SQL: Make multiple insertions into a table
4. SQL: Create a foreign key ( 2 types on delete)
4. SQL: Update some values inside a table
4. SQL: Delete a row
4. SQL: Copy a table (2 ways)
4. SQL: Use select, where and order by
4. SQL: Select one new column as alias
4. SQL: See how many unique values are inside a column
4. SQL: Count all the rows
4. SQL: See the average of a column
4. SQL: See the sum of a column
4. SQL: Group a column and count it
4. SQL: Select: make multiple filtering
4. SQL: SELECT: Make filtering using IN
4. SQL: SELECT: Make filtering BETWEEN
4. SQL: SELECT: Make filtering LIKE
4. SQL: SELECT: Make multiple ordering
4. SQL: See first 5 rows, skip first 2
4. SQL: Make an union of selections
4. SQL: Use like with end , middle and beginning of a word
4. SQL: Join 2 tables
4. SQL: Create a subquery
4. SQL: Make 2 joins
4. SQL: Make a natural join
4. SQL: MAke a join using USING
4. SQL: Make an outer join
4. SQL: Make a cross join
5. SPARK: Create the main entry point to the spark functionality
5. SPARK: Load a file as a RDD
5. SPARK: Load a file as a RDD using inside range function
5. SPARK: Return a list that contains all of the elements of a RDD.
5. SPARK: Return the first element of a RDD.
5. SPARK: Take the first num elements of the RDD.
5. SPARK: Return the number of elements in this RDD.
5. SPARK: Return a new RDD containing the distinct elements in this RDD.
5. SPARK: Return a new RDD containing only the elements that satisfy a predicate.
5. SPARK: Return a new RDD by first applying a function to all elements of this RDD, and then flattening the results.
5. SPARK: Return the union of this RDD and another one.
5. SPARK: Return samples of a RDD ( 2 ways, elements that can be re-chosen)
5. SPARK: Return all possible pairs of 2 RDDs
5. SPARK: Save the rdd to another file
5. SPARK: Keeps a RDD in memory for repeated actions
5. SPARK: Running the spark job
5. SPARK: Enter in Spark visualizer
5. SPARK: Enter in Spark shell
6. GIT: Initialize a local git repository
6. GIT: Add files to the index (two ways to add all the files)
6. GIT: Remove an added file from the index
6. GIT: Commit without edditing the comment
6. GIT: Push to a remote repository
6. GIT: Pull from a repository
6. GIT: Clone a repository
6. GIT: Create a ignoring file and check if it works
6. GIT: Create and switch to another branch, then merge them
7. LINUX: Make a directory
7. LINUX: Make a directory in a particular destination
7. LINUX: Make multiple directories
7. LINUX: Remove a directory
7. LINUX: Change the directory
7. LINUX: Change the directory, go back
7. LINUX: Change the directory, go previous
7. LINUX: Change the directory, go to the root directory
7. LINUX: List the files in directory
7. LINUX: List all the files in subdirectories
7. LINUX: Checks the permissions
7. LINUX: Print working directory
7. LINUX: Copy a file in the same directory
7. LINUX: Copy a file in another directory
7. LINUX: Remove a file
7. LINUX: Remove a folder with a file inside
7. LINUX: Create a file using cat
7. LINUX: Concatenate to a file using cat
7. LINUX: View a file using cat
7. LINUX: Move a file
7. LINUX: Rename a file
7. LINUX: Checks the connection with a url
7. LINUX: See content of a file in real time
7. LINUX: See last 100 lines
7. LINUX: List all processes
7. LINUX: List all processes page by page
7. LINUX: Show the network status
7. LINUX: Network connections and status of sockets
7. LINUX: List the opened files
7. LINUX: Show the free space
7. LINUX: Show how much space uses some files
7. LINUX: Give the execution right (two ways)
7. LINUX: Show history
7. LINUX: Redo a command using numbers from history
7. LINUX: Check the internet connectivity
7. LINUX: Find a file in a directory
7. LINUX: Check network interface
7. LINUX: Restart your pc
7. LINUX: Show all users currently on the server
7. LINUX: Making shortcuts using alias
7. LINUX: Locate a file